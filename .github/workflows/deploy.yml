name: Salesforce Deploy

on:
  push:
    branches:
      - 'feature/*'
      - 'Feature/*'
      - 'FEATURE/*'
      - 'SMGR-*'
      - 'smgr-*'
      - 'Smgr-*'
      - 'SFO/*'
      - 'sfo/*'
      - 'Sfo/*'
      - 'SF-QA'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'SF-UAT'
        type: choice
        options:
          - SF-UAT
          - SF-Release

env:
  API_VERSION: '63.0'
  ORG_ALIAS: 'target-org'
  FALLBACK_DEPTH: '3'

jobs:
  feature-validation:
    if: |
      startsWith(github.ref_name, 'feature/') ||
      startsWith(github.ref_name, 'Feature/') ||
      startsWith(github.ref_name, 'FEATURE/') ||
      startsWith(github.ref_name, 'SMGR-') ||
      startsWith(github.ref_name, 'smgr-') ||
      startsWith(github.ref_name, 'Smgr-') ||
      startsWith(github.ref_name, 'SFO/') ||
      startsWith(github.ref_name, 'sfo/') ||
      startsWith(github.ref_name, 'Sfo/')
    runs-on: ubuntu-latest
    container: vlenergy/salesforcevlocity:v4.0
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Make Scripts Executable
        run: chmod +x CIScripts/*.sh

      - name: Authenticate to Salesforce Org (QA)
        run: |
          echo "${{ secrets.SFDX_AUTH_URL_QA }}" > auth-url.txt
          sf org login sfdx-url --sfdx-url-file auth-url.txt --alias ${{ env.ORG_ALIAS }} --set-default

      - name: Generate Delta Package
        run: bash CIScripts/generate-delta.sh

      - name: Validate Deployment
        run: |
          sf project deploy validate \
            --source-dir delta/package \
            --target-org ${{ env.ORG_ALIAS }} \
            --test-level RunSpecifiedTests \
            --tests "AttachmentTriggerHandler_Test" \
            --wait 10 \
            --verbose || { echo "‚ùå Validation failed."; exit 1; }

  qa-deploy:
    if: github.ref == 'refs/heads/SF-QA'
    runs-on: ubuntu-latest
    container: vlenergy/salesforcevlocity:v4.0
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Make Scripts Executable
        run: chmod +x CIScripts/*.sh

      - name: Authenticate to Salesforce Org (QA)
        run: |
          echo "${{ secrets.SFDX_AUTH_URL_QA }}" > auth-url.txt
          sf org login sfdx-url --sfdx-url-file auth-url.txt --alias ${{ env.ORG_ALIAS }} --set-default

      - name: Generate Delta Package
        run: bash CIScripts/generate-delta.sh

      - name: Backup Delta from Org
        run: bash CIScripts/delta-backup.sh
        env:
          BACKUP_DIR: "deltabackup-${{ github.run_id }}"
          ORG_ALIAS: ${{ env.ORG_ALIAS }}

      - name: Upload Delta Backup Artifact
        uses: actions/upload-artifact@v4
        with:
          name: delta-backup-SF-QA
          path: deltabackup*

      - name: Deploy Delta to Org
        run: |
          sf project deploy start \
            --source-dir delta/package \
            --ignore-conflicts \
            --target-org ${{ env.ORG_ALIAS }} \
            --test-level RunSpecifiedTests \
            --tests "AttachmentTriggerHandler_Test" \
            --wait 10 \
            --verbose || { echo "‚ùå Deployment failed."; exit 1; }

      - name: Update SHA in Target Salesforce Org After Deployment
        run: |
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "üìù Delta deployment successful. Updating SHA to ${COMMIT_SHA} in Org..."
          sf data record update \
            --sobject Deployment_Metadata__mdt \
            --record-id "$(sf data query --query "SELECT Id FROM Deployment_Metadata__mdt LIMIT 1" --target-org "${{ env.ORG_ALIAS }}" --json | jq -r '.result.records[0].Id')" \
            --values "Last_Deployed_SHA__c='${COMMIT_SHA}'" \
            --target-org "${{ env.ORG_ALIAS }}" \
            --usetoolingapi \
            --verbose|| echo "‚ö†Ô∏è Failed to update SHA in Org."

      - name: Deploy Destructive Changes
        run: |
          if [[ -s "delta/destructiveChanges.xml" ]]; then
            echo "‚úÖ Destructive changes found. Deploying..."
            mkdir -p delta/destructive
            echo '<?xml version="1.0" encoding="UTF-8"?>' > delta/destructive/package.xml
            echo '<Package xmlns="http://soap.sforce.com/2006/04/metadata">' >> delta/destructive/package.xml
            echo "  <version>${{ env.API_VERSION }}</version>" >> delta/destructive/package.xml
            echo '</Package>' >> delta/destructive/package.xml
            cp delta/destructiveChanges.xml delta/destructive/destructiveChanges.xml
            sf project deploy start \
              --manifest delta/destructive/package.xml \
              --destructive-changes delta/destructive/destructiveChanges.xml \
              --tests "AttachmentTriggerHandler_Test" \
              --target-org ${{ env.ORG_ALIAS }} \
              --wait 10 \
              --verbose || echo "‚ö†Ô∏è Destructive deployment skipped due to error."
          else
            echo "üö´ No destructive changes found. Skipping."
          fi

  manual-deploy:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    container: vlenergy/salesforcevlocity:v4.0
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment }}
      ORG_ALIAS: 'target-org'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Make Scripts Executable
        run: chmod +x CIScripts/*.sh

      - name: Authenticate to Salesforce Org
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "SF-UAT" ]]; then
            echo "${{ secrets.SFDX_AUTH_URL_UAT }}" > auth-url.txt
          elif [[ "${{ github.event.inputs.environment }}" == "SF-Release" ]]; then
            echo "${{ secrets.SFDX_AUTH_URL_PREPROD }}" > auth-url.txt
          else
            echo "‚ùå Unknown environment. Aborting."
            exit 1
          fi
          sf org login sfdx-url --sfdx-url-file auth-url.txt --alias ${{ env.ORG_ALIAS }} --set-default

      - name: Generate Delta Package
        run: bash CIScripts/generate-delta.sh
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment }}
          FALLBACK_DEPTH: ${{ env.FALLBACK_DEPTH }}

      - name: Backup Delta from Org
        run: bash CIScripts/delta-backup.sh
        env:
          BACKUP_DIR: "deltabackup-${{ github.run_id }}"
          ORG_ALIAS: ${{ env.ORG_ALIAS }}

      - name: Upload Delta Backup Artifact
        uses: actions/upload-artifact@v4
        with:
          name: delta-backup-${{ github.event.inputs.environment }}
          path: deltabackup*

      - name: Deploy Delta to Org
        run: |
          sf project deploy start \
            --source-dir delta/package \
            --ignore-conflicts \
            --target-org ${{ env.ORG_ALIAS }} \
            --test-level RunSpecifiedTests \
            --tests "AttachmentTriggerHandler_Test" \
            --wait 10 \
            --verbose || { echo "‚ùå Deployment failed."; exit 1; }

      - name: Update SHA in Target Salesforce Org After Deployment
        run: |
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "üìù Delta deployment successful. Updating SHA to ${COMMIT_SHA} in Org..."
          sf data record update \
            --sobject Deployment_Metadata__mdt \
            --record-id "$(sf data query --query "SELECT Id FROM Deployment_Metadata__mdt LIMIT 1" --target-org "${{ env.ORG_ALIAS }}" --json | jq -r '.result.records[0].Id')" \
            --values "Last_Deployed_SHA__c='${COMMIT_SHA}'" \
            --target-org "${{ env.ORG_ALIAS }}" \
            --usetoolingapi \
            --verbose|| echo "‚ö†Ô∏è Failed to update SHA in Org."

      - name: Deploy Destructive Changes
        run: |
          if [[ -s "delta/destructiveChanges.xml" ]]; then
            echo "‚úÖ Destructive changes found. Deploying..."
            mkdir -p delta/destructive
            echo '<?xml version="1.0" encoding="UTF-8"?>' > delta/destructive/package.xml
            echo '<Package xmlns="http://soap.sforce.com/2006/04/metadata">' >> delta/destructive/package.xml
            echo "  <version>${{ env.API_VERSION }}</version>" >> delta/destructive/package.xml
            echo '</Package>' >> delta/destructive/package.xml
            cp delta/destructiveChanges.xml delta/destructive/destructiveChanges.xml
            sf project deploy start \
              --manifest delta/destructive/package.xml \
              --destructive-changes delta/destructive/destructiveChanges.xml \
              --target-org ${{ env.ORG_ALIAS }} \
              --wait 10 \
              --verbose || {
                echo "‚ö†Ô∏è Destructive deployment failed. Skipping cleanup."
              }
          else
            echo "üö´ No destructive changes found. Skipping destructive deployment."
          fi
